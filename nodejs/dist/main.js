/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/minimist/index.js":
/*!****************************************!*\
  !*** ./node_modules/minimist/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (args, opts) {\n    if (!opts) opts = {};\n    \n    var flags = { bools : {}, strings : {}, unknownFn: null };\n\n    if (typeof opts['unknown'] === 'function') {\n        flags.unknownFn = opts['unknown'];\n    }\n\n    if (typeof opts['boolean'] === 'boolean' && opts['boolean']) {\n      flags.allBools = true;\n    } else {\n      [].concat(opts['boolean']).filter(Boolean).forEach(function (key) {\n          flags.bools[key] = true;\n      });\n    }\n    \n    var aliases = {};\n    Object.keys(opts.alias || {}).forEach(function (key) {\n        aliases[key] = [].concat(opts.alias[key]);\n        aliases[key].forEach(function (x) {\n            aliases[x] = [key].concat(aliases[key].filter(function (y) {\n                return x !== y;\n            }));\n        });\n    });\n\n    [].concat(opts.string).filter(Boolean).forEach(function (key) {\n        flags.strings[key] = true;\n        if (aliases[key]) {\n            flags.strings[aliases[key]] = true;\n        }\n     });\n\n    var defaults = opts['default'] || {};\n    \n    var argv = { _ : [] };\n    Object.keys(flags.bools).forEach(function (key) {\n        setArg(key, defaults[key] === undefined ? false : defaults[key]);\n    });\n    \n    var notFlags = [];\n\n    if (args.indexOf('--') !== -1) {\n        notFlags = args.slice(args.indexOf('--')+1);\n        args = args.slice(0, args.indexOf('--'));\n    }\n\n    function argDefined(key, arg) {\n        return (flags.allBools && /^--[^=]+$/.test(arg)) ||\n            flags.strings[key] || flags.bools[key] || aliases[key];\n    }\n\n    function setArg (key, val, arg) {\n        if (arg && flags.unknownFn && !argDefined(key, arg)) {\n            if (flags.unknownFn(arg) === false) return;\n        }\n\n        var value = !flags.strings[key] && isNumber(val)\n            ? Number(val) : val\n        ;\n        setKey(argv, key.split('.'), value);\n        \n        (aliases[key] || []).forEach(function (x) {\n            setKey(argv, x.split('.'), value);\n        });\n    }\n\n    function setKey (obj, keys, value) {\n        var o = obj;\n        keys.slice(0,-1).forEach(function (key) {\n            if (o[key] === undefined) o[key] = {};\n            o = o[key];\n        });\n\n        var key = keys[keys.length - 1];\n        if (o[key] === undefined || flags.bools[key] || typeof o[key] === 'boolean') {\n            o[key] = value;\n        }\n        else if (Array.isArray(o[key])) {\n            o[key].push(value);\n        }\n        else {\n            o[key] = [ o[key], value ];\n        }\n    }\n    \n    function aliasIsBoolean(key) {\n      return aliases[key].some(function (x) {\n          return flags.bools[x];\n      });\n    }\n\n    for (var i = 0; i < args.length; i++) {\n        var arg = args[i];\n        \n        if (/^--.+=/.test(arg)) {\n            // Using [\\s\\S] instead of . because js doesn't support the\n            // 'dotall' regex modifier. See:\n            // http://stackoverflow.com/a/1068308/13216\n            var m = arg.match(/^--([^=]+)=([\\s\\S]*)$/);\n            var key = m[1];\n            var value = m[2];\n            if (flags.bools[key]) {\n                value = value !== 'false';\n            }\n            setArg(key, value, arg);\n        }\n        else if (/^--no-.+/.test(arg)) {\n            var key = arg.match(/^--no-(.+)/)[1];\n            setArg(key, false, arg);\n        }\n        else if (/^--.+/.test(arg)) {\n            var key = arg.match(/^--(.+)/)[1];\n            var next = args[i + 1];\n            if (next !== undefined && !/^-/.test(next)\n            && !flags.bools[key]\n            && !flags.allBools\n            && (aliases[key] ? !aliasIsBoolean(key) : true)) {\n                setArg(key, next, arg);\n                i++;\n            }\n            else if (/^(true|false)$/.test(next)) {\n                setArg(key, next === 'true', arg);\n                i++;\n            }\n            else {\n                setArg(key, flags.strings[key] ? '' : true, arg);\n            }\n        }\n        else if (/^-[^-]+/.test(arg)) {\n            var letters = arg.slice(1,-1).split('');\n            \n            var broken = false;\n            for (var j = 0; j < letters.length; j++) {\n                var next = arg.slice(j+2);\n                \n                if (next === '-') {\n                    setArg(letters[j], next, arg)\n                    continue;\n                }\n                \n                if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) {\n                    setArg(letters[j], next.split('=')[1], arg);\n                    broken = true;\n                    break;\n                }\n                \n                if (/[A-Za-z]/.test(letters[j])\n                && /-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) {\n                    setArg(letters[j], next, arg);\n                    broken = true;\n                    break;\n                }\n                \n                if (letters[j+1] && letters[j+1].match(/\\W/)) {\n                    setArg(letters[j], arg.slice(j+2), arg);\n                    broken = true;\n                    break;\n                }\n                else {\n                    setArg(letters[j], flags.strings[letters[j]] ? '' : true, arg);\n                }\n            }\n            \n            var key = arg.slice(-1)[0];\n            if (!broken && key !== '-') {\n                if (args[i+1] && !/^(-|--)[^-]/.test(args[i+1])\n                && !flags.bools[key]\n                && (aliases[key] ? !aliasIsBoolean(key) : true)) {\n                    setArg(key, args[i+1], arg);\n                    i++;\n                }\n                else if (args[i+1] && /true|false/.test(args[i+1])) {\n                    setArg(key, args[i+1] === 'true', arg);\n                    i++;\n                }\n                else {\n                    setArg(key, flags.strings[key] ? '' : true, arg);\n                }\n            }\n        }\n        else {\n            if (!flags.unknownFn || flags.unknownFn(arg) !== false) {\n                argv._.push(\n                    flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)\n                );\n            }\n            if (opts.stopEarly) {\n                argv._.push.apply(argv._, args.slice(i + 1));\n                break;\n            }\n        }\n    }\n    \n    Object.keys(defaults).forEach(function (key) {\n        if (!hasKey(argv, key.split('.'))) {\n            setKey(argv, key.split('.'), defaults[key]);\n            \n            (aliases[key] || []).forEach(function (x) {\n                setKey(argv, x.split('.'), defaults[key]);\n            });\n        }\n    });\n    \n    if (opts['--']) {\n        argv['--'] = new Array();\n        notFlags.forEach(function(key) {\n            argv['--'].push(key);\n        });\n    }\n    else {\n        notFlags.forEach(function(key) {\n            argv._.push(key);\n        });\n    }\n\n    return argv;\n};\n\nfunction hasKey (obj, keys) {\n    var o = obj;\n    keys.slice(0,-1).forEach(function (key) {\n        o = (o[key] || {});\n    });\n\n    var key = keys[keys.length - 1];\n    return key in o;\n}\n\nfunction isNumber (x) {\n    if (typeof x === 'number') return true;\n    if (/^0x[0-9a-f]+$/i.test(x)) return true;\n    return /^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/minimist/index.js\n");

/***/ }),

/***/ "./node_modules/node-fetch/lib/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/node-fetch/lib/index.mjs ***!
  \***********************************************/
/*! exports provided: default, Headers, Request, Response, FetchError */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FetchError\", function() { return FetchError; });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zlib */ \"zlib\");\n\r\n\r\n\r\n\r\n\r\n\r\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\r\n\r\n// fix for \"Readable\" isn't a named export issue\r\nconst Readable = stream__WEBPACK_IMPORTED_MODULE_0__.Readable;\r\n\r\nconst BUFFER = Symbol('buffer');\r\nconst TYPE = Symbol('type');\r\n\r\nclass Blob {\r\n\tconstructor() {\r\n\t\tthis[TYPE] = '';\r\n\r\n\t\tconst blobParts = arguments[0];\r\n\t\tconst options = arguments[1];\r\n\r\n\t\tconst buffers = [];\r\n\t\tlet size = 0;\r\n\r\n\t\tif (blobParts) {\r\n\t\t\tconst a = blobParts;\r\n\t\t\tconst length = Number(a.length);\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tconst element = a[i];\r\n\t\t\t\tlet buffer;\r\n\t\t\t\tif (element instanceof Buffer) {\r\n\t\t\t\t\tbuffer = element;\r\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\r\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\r\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\r\n\t\t\t\t\tbuffer = Buffer.from(element);\r\n\t\t\t\t} else if (element instanceof Blob) {\r\n\t\t\t\t\tbuffer = element[BUFFER];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\r\n\t\t\t\t}\r\n\t\t\t\tsize += buffer.length;\r\n\t\t\t\tbuffers.push(buffer);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis[BUFFER] = Buffer.concat(buffers);\r\n\r\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\r\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\r\n\t\t\tthis[TYPE] = type;\r\n\t\t}\r\n\t}\r\n\tget size() {\r\n\t\treturn this[BUFFER].length;\r\n\t}\r\n\tget type() {\r\n\t\treturn this[TYPE];\r\n\t}\r\n\ttext() {\r\n\t\treturn Promise.resolve(this[BUFFER].toString());\r\n\t}\r\n\tarrayBuffer() {\r\n\t\tconst buf = this[BUFFER];\r\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n\t\treturn Promise.resolve(ab);\r\n\t}\r\n\tstream() {\r\n\t\tconst readable = new Readable();\r\n\t\treadable._read = function () {};\r\n\t\treadable.push(this[BUFFER]);\r\n\t\treadable.push(null);\r\n\t\treturn readable;\r\n\t}\r\n\ttoString() {\r\n\t\treturn '[object Blob]';\r\n\t}\r\n\tslice() {\r\n\t\tconst size = this.size;\r\n\r\n\t\tconst start = arguments[0];\r\n\t\tconst end = arguments[1];\r\n\t\tlet relativeStart, relativeEnd;\r\n\t\tif (start === undefined) {\r\n\t\t\trelativeStart = 0;\r\n\t\t} else if (start < 0) {\r\n\t\t\trelativeStart = Math.max(size + start, 0);\r\n\t\t} else {\r\n\t\t\trelativeStart = Math.min(start, size);\r\n\t\t}\r\n\t\tif (end === undefined) {\r\n\t\t\trelativeEnd = size;\r\n\t\t} else if (end < 0) {\r\n\t\t\trelativeEnd = Math.max(size + end, 0);\r\n\t\t} else {\r\n\t\t\trelativeEnd = Math.min(end, size);\r\n\t\t}\r\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\r\n\r\n\t\tconst buffer = this[BUFFER];\r\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\r\n\t\tconst blob = new Blob([], { type: arguments[2] });\r\n\t\tblob[BUFFER] = slicedBuffer;\r\n\t\treturn blob;\r\n\t}\r\n}\r\n\r\nObject.defineProperties(Blob.prototype, {\r\n\tsize: { enumerable: true },\r\n\ttype: { enumerable: true },\r\n\tslice: { enumerable: true }\r\n});\r\n\r\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Blob',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\n/**\r\n * fetch-error.js\r\n *\r\n * FetchError interface for operational errors\r\n */\r\n\r\n/**\r\n * Create FetchError instance\r\n *\r\n * @param   String      message      Error message for human\r\n * @param   String      type         Error type for machine\r\n * @param   String      systemError  For Node.js system error\r\n * @return  FetchError\r\n */\r\nfunction FetchError(message, type, systemError) {\r\n  Error.call(this, message);\r\n\r\n  this.message = message;\r\n  this.type = type;\r\n\r\n  // when err.type is `system`, err.code contains system error code\r\n  if (systemError) {\r\n    this.code = this.errno = systemError.code;\r\n  }\r\n\r\n  // hide custom error implementation details from end-users\r\n  Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\nFetchError.prototype = Object.create(Error.prototype);\r\nFetchError.prototype.constructor = FetchError;\r\nFetchError.prototype.name = 'FetchError';\r\n\r\nlet convert;\r\ntry {\r\n\tconvert = require('encoding').convert;\r\n} catch (e) {}\r\n\r\nconst INTERNALS = Symbol('Body internals');\r\n\r\n// fix an issue where \"PassThrough\" isn't a named export for node <10\r\nconst PassThrough = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;\r\n\r\n/**\r\n * Body mixin\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#body\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nfunction Body(body) {\r\n\tvar _this = this;\r\n\r\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n\t    _ref$size = _ref.size;\r\n\r\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\r\n\tvar _ref$timeout = _ref.timeout;\r\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\r\n\r\n\tif (body == null) {\r\n\t\t// body is undefined or null\r\n\t\tbody = null;\r\n\t} else if (isURLSearchParams(body)) {\r\n\t\t// body is a URLSearchParams\r\n\t\tbody = Buffer.from(body.toString());\r\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\r\n\t\t// body is ArrayBuffer\r\n\t\tbody = Buffer.from(body);\r\n\t} else if (ArrayBuffer.isView(body)) {\r\n\t\t// body is ArrayBufferView\r\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\r\n\t} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) ; else {\r\n\t\t// none of the above\r\n\t\t// coerce to string then buffer\r\n\t\tbody = Buffer.from(String(body));\r\n\t}\r\n\tthis[INTERNALS] = {\r\n\t\tbody,\r\n\t\tdisturbed: false,\r\n\t\terror: null\r\n\t};\r\n\tthis.size = size;\r\n\tthis.timeout = timeout;\r\n\r\n\tif (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {\r\n\t\tbody.on('error', function (err) {\r\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\r\n\t\t\t_this[INTERNALS].error = error;\r\n\t\t});\r\n\t}\r\n}\r\n\r\nBody.prototype = {\r\n\tget body() {\r\n\t\treturn this[INTERNALS].body;\r\n\t},\r\n\r\n\tget bodyUsed() {\r\n\t\treturn this[INTERNALS].disturbed;\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as ArrayBuffer\r\n  *\r\n  * @return  Promise\r\n  */\r\n\tarrayBuffer() {\r\n\t\treturn consumeBody.call(this).then(function (buf) {\r\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Return raw response as Blob\r\n  *\r\n  * @return Promise\r\n  */\r\n\tblob() {\r\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\r\n\t\treturn consumeBody.call(this).then(function (buf) {\r\n\t\t\treturn Object.assign(\r\n\t\t\t// Prevent copying\r\n\t\t\tnew Blob([], {\r\n\t\t\t\ttype: ct.toLowerCase()\r\n\t\t\t}), {\r\n\t\t\t\t[BUFFER]: buf\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as json\r\n  *\r\n  * @return  Promise\r\n  */\r\n\tjson() {\r\n\t\tvar _this2 = this;\r\n\r\n\t\treturn consumeBody.call(this).then(function (buffer) {\r\n\t\t\ttry {\r\n\t\t\t\treturn JSON.parse(buffer.toString());\r\n\t\t\t} catch (err) {\r\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as text\r\n  *\r\n  * @return  Promise\r\n  */\r\n\ttext() {\r\n\t\treturn consumeBody.call(this).then(function (buffer) {\r\n\t\t\treturn buffer.toString();\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as buffer (non-spec api)\r\n  *\r\n  * @return  Promise\r\n  */\r\n\tbuffer() {\r\n\t\treturn consumeBody.call(this);\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as text, while automatically detecting the encoding and\r\n  * trying to decode to UTF-8 (non-spec api)\r\n  *\r\n  * @return  Promise\r\n  */\r\n\ttextConverted() {\r\n\t\tvar _this3 = this;\r\n\r\n\t\treturn consumeBody.call(this).then(function (buffer) {\r\n\t\t\treturn convertBody(buffer, _this3.headers);\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// In browsers, all properties are enumerable.\r\nObject.defineProperties(Body.prototype, {\r\n\tbody: { enumerable: true },\r\n\tbodyUsed: { enumerable: true },\r\n\tarrayBuffer: { enumerable: true },\r\n\tblob: { enumerable: true },\r\n\tjson: { enumerable: true },\r\n\ttext: { enumerable: true }\r\n});\r\n\r\nBody.mixIn = function (proto) {\r\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\r\n\t\t// istanbul ignore else: future proof\r\n\t\tif (!(name in proto)) {\r\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\r\n\t\t\tObject.defineProperty(proto, name, desc);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Consume and convert an entire Body to a Buffer.\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\r\n *\r\n * @return  Promise\r\n */\r\nfunction consumeBody() {\r\n\tvar _this4 = this;\r\n\r\n\tif (this[INTERNALS].disturbed) {\r\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\r\n\t}\r\n\r\n\tthis[INTERNALS].disturbed = true;\r\n\r\n\tif (this[INTERNALS].error) {\r\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\r\n\t}\r\n\r\n\tlet body = this.body;\r\n\r\n\t// body is null\r\n\tif (body === null) {\r\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\r\n\t}\r\n\r\n\t// body is blob\r\n\tif (isBlob(body)) {\r\n\t\tbody = body.stream();\r\n\t}\r\n\r\n\t// body is buffer\r\n\tif (Buffer.isBuffer(body)) {\r\n\t\treturn Body.Promise.resolve(body);\r\n\t}\r\n\r\n\t// istanbul ignore if: should never happen\r\n\tif (!(body instanceof stream__WEBPACK_IMPORTED_MODULE_0__)) {\r\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\r\n\t}\r\n\r\n\t// body is stream\r\n\t// get ready to actually consume the body\r\n\tlet accum = [];\r\n\tlet accumBytes = 0;\r\n\tlet abort = false;\r\n\r\n\treturn new Body.Promise(function (resolve, reject) {\r\n\t\tlet resTimeout;\r\n\r\n\t\t// allow timeout on slow response body\r\n\t\tif (_this4.timeout) {\r\n\t\t\tresTimeout = setTimeout(function () {\r\n\t\t\t\tabort = true;\r\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\r\n\t\t\t}, _this4.timeout);\r\n\t\t}\r\n\r\n\t\t// handle stream errors\r\n\t\tbody.on('error', function (err) {\r\n\t\t\tif (err.name === 'AbortError') {\r\n\t\t\t\t// if the request was aborted, reject with this Error\r\n\t\t\t\tabort = true;\r\n\t\t\t\treject(err);\r\n\t\t\t} else {\r\n\t\t\t\t// other errors, such as incorrect content-encoding\r\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbody.on('data', function (chunk) {\r\n\t\t\tif (abort || chunk === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\r\n\t\t\t\tabort = true;\r\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\taccumBytes += chunk.length;\r\n\t\t\taccum.push(chunk);\r\n\t\t});\r\n\r\n\t\tbody.on('end', function () {\r\n\t\t\tif (abort) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tclearTimeout(resTimeout);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\r\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * Detect buffer encoding and convert to target encoding\r\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\r\n *\r\n * @param   Buffer  buffer    Incoming buffer\r\n * @param   String  encoding  Target encoding\r\n * @return  String\r\n */\r\nfunction convertBody(buffer, headers) {\r\n\tif (typeof convert !== 'function') {\r\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\r\n\t}\r\n\r\n\tconst ct = headers.get('content-type');\r\n\tlet charset = 'utf-8';\r\n\tlet res, str;\r\n\r\n\t// header\r\n\tif (ct) {\r\n\t\tres = /charset=([^;]*)/i.exec(ct);\r\n\t}\r\n\r\n\t// no charset in content type, peek at response body for at most 1024 bytes\r\n\tstr = buffer.slice(0, 1024).toString();\r\n\r\n\t// html5\r\n\tif (!res && str) {\r\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\r\n\t}\r\n\r\n\t// html4\r\n\tif (!res && str) {\r\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\r\n\r\n\t\tif (res) {\r\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\r\n\t\t}\r\n\t}\r\n\r\n\t// xml\r\n\tif (!res && str) {\r\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\r\n\t}\r\n\r\n\t// found charset\r\n\tif (res) {\r\n\t\tcharset = res.pop();\r\n\r\n\t\t// prevent decode issues when sites use incorrect encoding\r\n\t\t// ref: https://hsivonen.fi/encoding-menu/\r\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\r\n\t\t\tcharset = 'gb18030';\r\n\t\t}\r\n\t}\r\n\r\n\t// turn raw buffers into a single utf-8 buffer\r\n\treturn convert(buffer, 'UTF-8', charset).toString();\r\n}\r\n\r\n/**\r\n * Detect a URLSearchParams object\r\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\r\n *\r\n * @param   Object  obj     Object to detect by type or brand\r\n * @return  String\r\n */\r\nfunction isURLSearchParams(obj) {\r\n\t// Duck-typing as a necessary condition.\r\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Brand-checking and more duck-typing as optional condition.\r\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\r\n}\r\n\r\n/**\r\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\r\n * @param  {*} obj\r\n * @return {boolean}\r\n */\r\nfunction isBlob(obj) {\r\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\r\n}\r\n\r\n/**\r\n * Clone body given Res/Req instance\r\n *\r\n * @param   Mixed  instance  Response or Request instance\r\n * @return  Mixed\r\n */\r\nfunction clone(instance) {\r\n\tlet p1, p2;\r\n\tlet body = instance.body;\r\n\r\n\t// don't allow cloning a used body\r\n\tif (instance.bodyUsed) {\r\n\t\tthrow new Error('cannot clone body after it is used');\r\n\t}\r\n\r\n\t// check that body is a stream and not form-data object\r\n\t// note: we can't clone the form-data object without having it as a dependency\r\n\tif (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__ && typeof body.getBoundary !== 'function') {\r\n\t\t// tee instance body\r\n\t\tp1 = new PassThrough();\r\n\t\tp2 = new PassThrough();\r\n\t\tbody.pipe(p1);\r\n\t\tbody.pipe(p2);\r\n\t\t// set instance body to teed body and return the other teed body\r\n\t\tinstance[INTERNALS].body = p1;\r\n\t\tbody = p2;\r\n\t}\r\n\r\n\treturn body;\r\n}\r\n\r\n/**\r\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\r\n * specified in the specification:\r\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\r\n *\r\n * This function assumes that instance.body is present.\r\n *\r\n * @param   Mixed  instance  Any options.body input\r\n */\r\nfunction extractContentType(body) {\r\n\tif (body === null) {\r\n\t\t// body is null\r\n\t\treturn null;\r\n\t} else if (typeof body === 'string') {\r\n\t\t// body is string\r\n\t\treturn 'text/plain;charset=UTF-8';\r\n\t} else if (isURLSearchParams(body)) {\r\n\t\t// body is a URLSearchParams\r\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\r\n\t} else if (isBlob(body)) {\r\n\t\t// body is blob\r\n\t\treturn body.type || null;\r\n\t} else if (Buffer.isBuffer(body)) {\r\n\t\t// body is buffer\r\n\t\treturn null;\r\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\r\n\t\t// body is ArrayBuffer\r\n\t\treturn null;\r\n\t} else if (ArrayBuffer.isView(body)) {\r\n\t\t// body is ArrayBufferView\r\n\t\treturn null;\r\n\t} else if (typeof body.getBoundary === 'function') {\r\n\t\t// detect form data input from form-data module\r\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\r\n\t} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {\r\n\t\t// body is stream\r\n\t\t// can't really do much about this\r\n\t\treturn null;\r\n\t} else {\r\n\t\t// Body constructor defaults other things to string\r\n\t\treturn 'text/plain;charset=UTF-8';\r\n\t}\r\n}\r\n\r\n/**\r\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\r\n * For us, we have to explicitly get it with a function.\r\n *\r\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\r\n *\r\n * @param   Body    instance   Instance of Body\r\n * @return  Number?            Number of bytes, or null if not possible\r\n */\r\nfunction getTotalBytes(instance) {\r\n\tconst body = instance.body;\r\n\r\n\r\n\tif (body === null) {\r\n\t\t// body is null\r\n\t\treturn 0;\r\n\t} else if (isBlob(body)) {\r\n\t\treturn body.size;\r\n\t} else if (Buffer.isBuffer(body)) {\r\n\t\t// body is buffer\r\n\t\treturn body.length;\r\n\t} else if (body && typeof body.getLengthSync === 'function') {\r\n\t\t// detect form data input from form-data module\r\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\r\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\r\n\t\t\t// 2.x\r\n\t\t\treturn body.getLengthSync();\r\n\t\t}\r\n\t\treturn null;\r\n\t} else {\r\n\t\t// body is stream\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\r\n *\r\n * @param   Body    instance   Instance of Body\r\n * @return  Void\r\n */\r\nfunction writeToStream(dest, instance) {\r\n\tconst body = instance.body;\r\n\r\n\r\n\tif (body === null) {\r\n\t\t// body is null\r\n\t\tdest.end();\r\n\t} else if (isBlob(body)) {\r\n\t\tbody.stream().pipe(dest);\r\n\t} else if (Buffer.isBuffer(body)) {\r\n\t\t// body is buffer\r\n\t\tdest.write(body);\r\n\t\tdest.end();\r\n\t} else {\r\n\t\t// body is stream\r\n\t\tbody.pipe(dest);\r\n\t}\r\n}\r\n\r\n// expose Promise\r\nBody.Promise = global.Promise;\r\n\r\n/**\r\n * headers.js\r\n *\r\n * Headers class offers convenient helpers\r\n */\r\n\r\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\r\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\r\n\r\nfunction validateName(name) {\r\n\tname = `${name}`;\r\n\tif (invalidTokenRegex.test(name) || name === '') {\r\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\r\n\t}\r\n}\r\n\r\nfunction validateValue(value) {\r\n\tvalue = `${value}`;\r\n\tif (invalidHeaderCharRegex.test(value)) {\r\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Find the key in the map object given a header name.\r\n *\r\n * Returns undefined if not found.\r\n *\r\n * @param   String  name  Header name\r\n * @return  String|Undefined\r\n */\r\nfunction find(map, name) {\r\n\tname = name.toLowerCase();\r\n\tfor (const key in map) {\r\n\t\tif (key.toLowerCase() === name) {\r\n\t\t\treturn key;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nconst MAP = Symbol('map');\r\nclass Headers {\r\n\t/**\r\n  * Headers class\r\n  *\r\n  * @param   Object  headers  Response headers\r\n  * @return  Void\r\n  */\r\n\tconstructor() {\r\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\r\n\r\n\t\tthis[MAP] = Object.create(null);\r\n\r\n\t\tif (init instanceof Headers) {\r\n\t\t\tconst rawHeaders = init.raw();\r\n\t\t\tconst headerNames = Object.keys(rawHeaders);\r\n\r\n\t\t\tfor (const headerName of headerNames) {\r\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\r\n\t\t\t\t\tthis.append(headerName, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We don't worry about converting prop to ByteString here as append()\r\n\t\t// will handle it.\r\n\t\tif (init == null) ; else if (typeof init === 'object') {\r\n\t\t\tconst method = init[Symbol.iterator];\r\n\t\t\tif (method != null) {\r\n\t\t\t\tif (typeof method !== 'function') {\r\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// sequence<sequence<ByteString>>\r\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\r\n\t\t\t\tconst pairs = [];\r\n\t\t\t\tfor (const pair of init) {\r\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\r\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpairs.push(Array.from(pair));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const pair of pairs) {\r\n\t\t\t\t\tif (pair.length !== 2) {\r\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.append(pair[0], pair[1]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// record<ByteString, ByteString>\r\n\t\t\t\tfor (const key of Object.keys(init)) {\r\n\t\t\t\t\tconst value = init[key];\r\n\t\t\t\t\tthis.append(key, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Provided initializer must be an object');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Return combined header value given name\r\n  *\r\n  * @param   String  name  Header name\r\n  * @return  Mixed\r\n  */\r\n\tget(name) {\r\n\t\tname = `${name}`;\r\n\t\tvalidateName(name);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tif (key === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn this[MAP][key].join(', ');\r\n\t}\r\n\r\n\t/**\r\n  * Iterate over all headers\r\n  *\r\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\r\n  * @param   Boolean   thisArg   `this` context for callback function\r\n  * @return  Void\r\n  */\r\n\tforEach(callback) {\r\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\r\n\r\n\t\tlet pairs = getHeaders(this);\r\n\t\tlet i = 0;\r\n\t\twhile (i < pairs.length) {\r\n\t\t\tvar _pairs$i = pairs[i];\r\n\t\t\tconst name = _pairs$i[0],\r\n\t\t\t      value = _pairs$i[1];\r\n\r\n\t\t\tcallback.call(thisArg, value, name, this);\r\n\t\t\tpairs = getHeaders(this);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Overwrite header values given name\r\n  *\r\n  * @param   String  name   Header name\r\n  * @param   String  value  Header value\r\n  * @return  Void\r\n  */\r\n\tset(name, value) {\r\n\t\tname = `${name}`;\r\n\t\tvalue = `${value}`;\r\n\t\tvalidateName(name);\r\n\t\tvalidateValue(value);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\r\n\t}\r\n\r\n\t/**\r\n  * Append a value onto existing header\r\n  *\r\n  * @param   String  name   Header name\r\n  * @param   String  value  Header value\r\n  * @return  Void\r\n  */\r\n\tappend(name, value) {\r\n\t\tname = `${name}`;\r\n\t\tvalue = `${value}`;\r\n\t\tvalidateName(name);\r\n\t\tvalidateValue(value);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tif (key !== undefined) {\r\n\t\t\tthis[MAP][key].push(value);\r\n\t\t} else {\r\n\t\t\tthis[MAP][name] = [value];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Check for header name existence\r\n  *\r\n  * @param   String   name  Header name\r\n  * @return  Boolean\r\n  */\r\n\thas(name) {\r\n\t\tname = `${name}`;\r\n\t\tvalidateName(name);\r\n\t\treturn find(this[MAP], name) !== undefined;\r\n\t}\r\n\r\n\t/**\r\n  * Delete all header values given name\r\n  *\r\n  * @param   String  name  Header name\r\n  * @return  Void\r\n  */\r\n\tdelete(name) {\r\n\t\tname = `${name}`;\r\n\t\tvalidateName(name);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tif (key !== undefined) {\r\n\t\t\tdelete this[MAP][key];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Return raw headers (non-spec api)\r\n  *\r\n  * @return  Object\r\n  */\r\n\traw() {\r\n\t\treturn this[MAP];\r\n\t}\r\n\r\n\t/**\r\n  * Get an iterator on keys.\r\n  *\r\n  * @return  Iterator\r\n  */\r\n\tkeys() {\r\n\t\treturn createHeadersIterator(this, 'key');\r\n\t}\r\n\r\n\t/**\r\n  * Get an iterator on values.\r\n  *\r\n  * @return  Iterator\r\n  */\r\n\tvalues() {\r\n\t\treturn createHeadersIterator(this, 'value');\r\n\t}\r\n\r\n\t/**\r\n  * Get an iterator on entries.\r\n  *\r\n  * This is the default iterator of the Headers object.\r\n  *\r\n  * @return  Iterator\r\n  */\r\n\t[Symbol.iterator]() {\r\n\t\treturn createHeadersIterator(this, 'key+value');\r\n\t}\r\n}\r\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\r\n\r\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Headers',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperties(Headers.prototype, {\r\n\tget: { enumerable: true },\r\n\tforEach: { enumerable: true },\r\n\tset: { enumerable: true },\r\n\tappend: { enumerable: true },\r\n\thas: { enumerable: true },\r\n\tdelete: { enumerable: true },\r\n\tkeys: { enumerable: true },\r\n\tvalues: { enumerable: true },\r\n\tentries: { enumerable: true }\r\n});\r\n\r\nfunction getHeaders(headers) {\r\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\r\n\r\n\tconst keys = Object.keys(headers[MAP]).sort();\r\n\treturn keys.map(kind === 'key' ? function (k) {\r\n\t\treturn k.toLowerCase();\r\n\t} : kind === 'value' ? function (k) {\r\n\t\treturn headers[MAP][k].join(', ');\r\n\t} : function (k) {\r\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\r\n\t});\r\n}\r\n\r\nconst INTERNAL = Symbol('internal');\r\n\r\nfunction createHeadersIterator(target, kind) {\r\n\tconst iterator = Object.create(HeadersIteratorPrototype);\r\n\titerator[INTERNAL] = {\r\n\t\ttarget,\r\n\t\tkind,\r\n\t\tindex: 0\r\n\t};\r\n\treturn iterator;\r\n}\r\n\r\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\r\n\tnext() {\r\n\t\t// istanbul ignore if\r\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\r\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\r\n\t\t}\r\n\r\n\t\tvar _INTERNAL = this[INTERNAL];\r\n\t\tconst target = _INTERNAL.target,\r\n\t\t      kind = _INTERNAL.kind,\r\n\t\t      index = _INTERNAL.index;\r\n\r\n\t\tconst values = getHeaders(target, kind);\r\n\t\tconst len = values.length;\r\n\t\tif (index >= len) {\r\n\t\t\treturn {\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdone: true\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis[INTERNAL].index = index + 1;\r\n\r\n\t\treturn {\r\n\t\t\tvalue: values[index],\r\n\t\t\tdone: false\r\n\t\t};\r\n\t}\r\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\r\n\r\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\r\n\tvalue: 'HeadersIterator',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\n/**\r\n * Export the Headers object in a form that Node.js can consume.\r\n *\r\n * @param   Headers  headers\r\n * @return  Object\r\n */\r\nfunction exportNodeCompatibleHeaders(headers) {\r\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\r\n\r\n\t// http.request() only supports string as Host header. This hack makes\r\n\t// specifying custom Host header possible.\r\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\r\n\tif (hostHeaderKey !== undefined) {\r\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\r\n\t}\r\n\r\n\treturn obj;\r\n}\r\n\r\n/**\r\n * Create a Headers object from an object of headers, ignoring those that do\r\n * not conform to HTTP grammar productions.\r\n *\r\n * @param   Object  obj  Object of headers\r\n * @return  Headers\r\n */\r\nfunction createHeadersLenient(obj) {\r\n\tconst headers = new Headers();\r\n\tfor (const name of Object.keys(obj)) {\r\n\t\tif (invalidTokenRegex.test(name)) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (Array.isArray(obj[name])) {\r\n\t\t\tfor (const val of obj[name]) {\r\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (headers[MAP][name] === undefined) {\r\n\t\t\t\t\theaders[MAP][name] = [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\theaders[MAP][name].push(val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\r\n\t\t\theaders[MAP][name] = [obj[name]];\r\n\t\t}\r\n\t}\r\n\treturn headers;\r\n}\r\n\r\nconst INTERNALS$1 = Symbol('Response internals');\r\n\r\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\r\nconst STATUS_CODES = http__WEBPACK_IMPORTED_MODULE_1__.STATUS_CODES;\r\n\r\n/**\r\n * Response class\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nclass Response {\r\n\tconstructor() {\r\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n\t\tBody.call(this, body, opts);\r\n\r\n\t\tconst status = opts.status || 200;\r\n\t\tconst headers = new Headers(opts.headers);\r\n\r\n\t\tif (body != null && !headers.has('Content-Type')) {\r\n\t\t\tconst contentType = extractContentType(body);\r\n\t\t\tif (contentType) {\r\n\t\t\t\theaders.append('Content-Type', contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS$1] = {\r\n\t\t\turl: opts.url,\r\n\t\t\tstatus,\r\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\r\n\t\t\theaders,\r\n\t\t\tcounter: opts.counter\r\n\t\t};\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn this[INTERNALS$1].url || '';\r\n\t}\r\n\r\n\tget status() {\r\n\t\treturn this[INTERNALS$1].status;\r\n\t}\r\n\r\n\t/**\r\n  * Convenience property representing if the request ended normally\r\n  */\r\n\tget ok() {\r\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\r\n\t}\r\n\r\n\tget redirected() {\r\n\t\treturn this[INTERNALS$1].counter > 0;\r\n\t}\r\n\r\n\tget statusText() {\r\n\t\treturn this[INTERNALS$1].statusText;\r\n\t}\r\n\r\n\tget headers() {\r\n\t\treturn this[INTERNALS$1].headers;\r\n\t}\r\n\r\n\t/**\r\n  * Clone this response\r\n  *\r\n  * @return  Response\r\n  */\r\n\tclone() {\r\n\t\treturn new Response(clone(this), {\r\n\t\t\turl: this.url,\r\n\t\t\tstatus: this.status,\r\n\t\t\tstatusText: this.statusText,\r\n\t\t\theaders: this.headers,\r\n\t\t\tok: this.ok,\r\n\t\t\tredirected: this.redirected\r\n\t\t});\r\n\t}\r\n}\r\n\r\nBody.mixIn(Response.prototype);\r\n\r\nObject.defineProperties(Response.prototype, {\r\n\turl: { enumerable: true },\r\n\tstatus: { enumerable: true },\r\n\tok: { enumerable: true },\r\n\tredirected: { enumerable: true },\r\n\tstatusText: { enumerable: true },\r\n\theaders: { enumerable: true },\r\n\tclone: { enumerable: true }\r\n});\r\n\r\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Response',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nconst INTERNALS$2 = Symbol('Request internals');\r\n\r\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\r\nconst parse_url = url__WEBPACK_IMPORTED_MODULE_2__.parse;\r\nconst format_url = url__WEBPACK_IMPORTED_MODULE_2__.format;\r\n\r\nconst streamDestructionSupported = 'destroy' in stream__WEBPACK_IMPORTED_MODULE_0__.Readable.prototype;\r\n\r\n/**\r\n * Check if a value is an instance of Request.\r\n *\r\n * @param   Mixed   input\r\n * @return  Boolean\r\n */\r\nfunction isRequest(input) {\r\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\r\n}\r\n\r\nfunction isAbortSignal(signal) {\r\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\r\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\r\n}\r\n\r\n/**\r\n * Request class\r\n *\r\n * @param   Mixed   input  Url or Request instance\r\n * @param   Object  init   Custom options\r\n * @return  Void\r\n */\r\nclass Request {\r\n\tconstructor(input) {\r\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n\t\tlet parsedURL;\r\n\r\n\t\t// normalize input\r\n\t\tif (!isRequest(input)) {\r\n\t\t\tif (input && input.href) {\r\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\r\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\r\n\t\t\t\t// `href` property anyway)\r\n\t\t\t\tparsedURL = parse_url(input.href);\r\n\t\t\t} else {\r\n\t\t\t\t// coerce input to a string before attempting to parse\r\n\t\t\t\tparsedURL = parse_url(`${input}`);\r\n\t\t\t}\r\n\t\t\tinput = {};\r\n\t\t} else {\r\n\t\t\tparsedURL = parse_url(input.url);\r\n\t\t}\r\n\r\n\t\tlet method = init.method || input.method || 'GET';\r\n\t\tmethod = method.toUpperCase();\r\n\r\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\r\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\r\n\t\t}\r\n\r\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\r\n\r\n\t\tBody.call(this, inputBody, {\r\n\t\t\ttimeout: init.timeout || input.timeout || 0,\r\n\t\t\tsize: init.size || input.size || 0\r\n\t\t});\r\n\r\n\t\tconst headers = new Headers(init.headers || input.headers || {});\r\n\r\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\r\n\t\t\tconst contentType = extractContentType(inputBody);\r\n\t\t\tif (contentType) {\r\n\t\t\t\theaders.append('Content-Type', contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet signal = isRequest(input) ? input.signal : null;\r\n\t\tif ('signal' in init) signal = init.signal;\r\n\r\n\t\tif (signal != null && !isAbortSignal(signal)) {\r\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS$2] = {\r\n\t\t\tmethod,\r\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\r\n\t\t\theaders,\r\n\t\t\tparsedURL,\r\n\t\t\tsignal\r\n\t\t};\r\n\r\n\t\t// node-fetch-only options\r\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\r\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\r\n\t\tthis.counter = init.counter || input.counter || 0;\r\n\t\tthis.agent = init.agent || input.agent;\r\n\t}\r\n\r\n\tget method() {\r\n\t\treturn this[INTERNALS$2].method;\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\r\n\t}\r\n\r\n\tget headers() {\r\n\t\treturn this[INTERNALS$2].headers;\r\n\t}\r\n\r\n\tget redirect() {\r\n\t\treturn this[INTERNALS$2].redirect;\r\n\t}\r\n\r\n\tget signal() {\r\n\t\treturn this[INTERNALS$2].signal;\r\n\t}\r\n\r\n\t/**\r\n  * Clone this request\r\n  *\r\n  * @return  Request\r\n  */\r\n\tclone() {\r\n\t\treturn new Request(this);\r\n\t}\r\n}\r\n\r\nBody.mixIn(Request.prototype);\r\n\r\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Request',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperties(Request.prototype, {\r\n\tmethod: { enumerable: true },\r\n\turl: { enumerable: true },\r\n\theaders: { enumerable: true },\r\n\tredirect: { enumerable: true },\r\n\tclone: { enumerable: true },\r\n\tsignal: { enumerable: true }\r\n});\r\n\r\n/**\r\n * Convert a Request to Node.js http request options.\r\n *\r\n * @param   Request  A Request instance\r\n * @return  Object   The options object to be passed to http.request\r\n */\r\nfunction getNodeRequestOptions(request) {\r\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\r\n\tconst headers = new Headers(request[INTERNALS$2].headers);\r\n\r\n\t// fetch step 1.3\r\n\tif (!headers.has('Accept')) {\r\n\t\theaders.set('Accept', '*/*');\r\n\t}\r\n\r\n\t// Basic fetch\r\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\r\n\t\tthrow new TypeError('Only absolute URLs are supported');\r\n\t}\r\n\r\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\r\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\r\n\t}\r\n\r\n\tif (request.signal && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable && !streamDestructionSupported) {\r\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\r\n\tlet contentLengthValue = null;\r\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\r\n\t\tcontentLengthValue = '0';\r\n\t}\r\n\tif (request.body != null) {\r\n\t\tconst totalBytes = getTotalBytes(request);\r\n\t\tif (typeof totalBytes === 'number') {\r\n\t\t\tcontentLengthValue = String(totalBytes);\r\n\t\t}\r\n\t}\r\n\tif (contentLengthValue) {\r\n\t\theaders.set('Content-Length', contentLengthValue);\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch step 2.11\r\n\tif (!headers.has('User-Agent')) {\r\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch step 2.15\r\n\tif (request.compress && !headers.has('Accept-Encoding')) {\r\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\r\n\t}\r\n\r\n\tlet agent = request.agent;\r\n\tif (typeof agent === 'function') {\r\n\t\tagent = agent(parsedURL);\r\n\t}\r\n\r\n\tif (!headers.has('Connection') && !agent) {\r\n\t\theaders.set('Connection', 'close');\r\n\t}\r\n\r\n\t// HTTP-network fetch step 4.2\r\n\t// chunked encoding is handled by Node.js\r\n\r\n\treturn Object.assign({}, parsedURL, {\r\n\t\tmethod: request.method,\r\n\t\theaders: exportNodeCompatibleHeaders(headers),\r\n\t\tagent\r\n\t});\r\n}\r\n\r\n/**\r\n * abort-error.js\r\n *\r\n * AbortError interface for cancelled requests\r\n */\r\n\r\n/**\r\n * Create AbortError instance\r\n *\r\n * @param   String      message      Error message for human\r\n * @return  AbortError\r\n */\r\nfunction AbortError(message) {\r\n  Error.call(this, message);\r\n\r\n  this.type = 'aborted';\r\n  this.message = message;\r\n\r\n  // hide custom error implementation details from end-users\r\n  Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\nAbortError.prototype = Object.create(Error.prototype);\r\nAbortError.prototype.constructor = AbortError;\r\nAbortError.prototype.name = 'AbortError';\r\n\r\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\r\nconst PassThrough$1 = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;\r\nconst resolve_url = url__WEBPACK_IMPORTED_MODULE_2__.resolve;\r\n\r\n/**\r\n * Fetch function\r\n *\r\n * @param   Mixed    url   Absolute url or Request instance\r\n * @param   Object   opts  Fetch options\r\n * @return  Promise\r\n */\r\nfunction fetch(url, opts) {\r\n\r\n\t// allow custom promise\r\n\tif (!fetch.Promise) {\r\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\r\n\t}\r\n\r\n\tBody.Promise = fetch.Promise;\r\n\r\n\t// wrap http.request into fetch\r\n\treturn new fetch.Promise(function (resolve, reject) {\r\n\t\t// build request object\r\n\t\tconst request = new Request(url, opts);\r\n\t\tconst options = getNodeRequestOptions(request);\r\n\r\n\t\tconst send = (options.protocol === 'https:' ? https__WEBPACK_IMPORTED_MODULE_3__ : http__WEBPACK_IMPORTED_MODULE_1__).request;\r\n\t\tconst signal = request.signal;\r\n\r\n\t\tlet response = null;\r\n\r\n\t\tconst abort = function abort() {\r\n\t\t\tlet error = new AbortError('The user aborted a request.');\r\n\t\t\treject(error);\r\n\t\t\tif (request.body && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable) {\r\n\t\t\t\trequest.body.destroy(error);\r\n\t\t\t}\r\n\t\t\tif (!response || !response.body) return;\r\n\t\t\tresponse.body.emit('error', error);\r\n\t\t};\r\n\r\n\t\tif (signal && signal.aborted) {\r\n\t\t\tabort();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst abortAndFinalize = function abortAndFinalize() {\r\n\t\t\tabort();\r\n\t\t\tfinalize();\r\n\t\t};\r\n\r\n\t\t// send request\r\n\t\tconst req = send(options);\r\n\t\tlet reqTimeout;\r\n\r\n\t\tif (signal) {\r\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\r\n\t\t}\r\n\r\n\t\tfunction finalize() {\r\n\t\t\treq.abort();\r\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\r\n\t\t\tclearTimeout(reqTimeout);\r\n\t\t}\r\n\r\n\t\tif (request.timeout) {\r\n\t\t\treq.once('socket', function (socket) {\r\n\t\t\t\treqTimeout = setTimeout(function () {\r\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\r\n\t\t\t\t\tfinalize();\r\n\t\t\t\t}, request.timeout);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treq.on('error', function (err) {\r\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\r\n\t\t\tfinalize();\r\n\t\t});\r\n\r\n\t\treq.on('response', function (res) {\r\n\t\t\tclearTimeout(reqTimeout);\r\n\r\n\t\t\tconst headers = createHeadersLenient(res.headers);\r\n\r\n\t\t\t// HTTP fetch step 5\r\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\r\n\t\t\t\t// HTTP fetch step 5.2\r\n\t\t\t\tconst location = headers.get('Location');\r\n\r\n\t\t\t\t// HTTP fetch step 5.3\r\n\t\t\t\tconst locationURL = location === null ? null : resolve_url(request.url, location);\r\n\r\n\t\t\t\t// HTTP fetch step 5.5\r\n\t\t\t\tswitch (request.redirect) {\r\n\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\treject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase 'manual':\r\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\r\n\t\t\t\t\t\tif (locationURL !== null) {\r\n\t\t\t\t\t\t\t// handle corrupted header\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\r\n\t\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\r\n\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'follow':\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\r\n\t\t\t\t\t\tif (locationURL === null) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\r\n\t\t\t\t\t\tif (request.counter >= request.follow) {\r\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\r\n\t\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\r\n\t\t\t\t\t\t// Create a new Request object.\r\n\t\t\t\t\t\tconst requestOpts = {\r\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\r\n\t\t\t\t\t\t\tfollow: request.follow,\r\n\t\t\t\t\t\t\tcounter: request.counter + 1,\r\n\t\t\t\t\t\t\tagent: request.agent,\r\n\t\t\t\t\t\t\tcompress: request.compress,\r\n\t\t\t\t\t\t\tmethod: request.method,\r\n\t\t\t\t\t\t\tbody: request.body,\r\n\t\t\t\t\t\t\tsignal: request.signal,\r\n\t\t\t\t\t\t\ttimeout: request.timeout\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\r\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\r\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\r\n\t\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\r\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\r\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\r\n\t\t\t\t\t\t\trequestOpts.body = undefined;\r\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\r\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// prepare response\r\n\t\t\tres.once('end', function () {\r\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\r\n\t\t\t});\r\n\t\t\tlet body = res.pipe(new PassThrough$1());\r\n\r\n\t\t\tconst response_options = {\r\n\t\t\t\turl: request.url,\r\n\t\t\t\tstatus: res.statusCode,\r\n\t\t\t\tstatusText: res.statusMessage,\r\n\t\t\t\theaders: headers,\r\n\t\t\t\tsize: request.size,\r\n\t\t\t\ttimeout: request.timeout,\r\n\t\t\t\tcounter: request.counter\r\n\t\t\t};\r\n\r\n\t\t\t// HTTP-network fetch step 12.1.1.3\r\n\t\t\tconst codings = headers.get('Content-Encoding');\r\n\r\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\r\n\r\n\t\t\t// in following scenarios we ignore compression support\r\n\t\t\t// 1. compression support is disabled\r\n\t\t\t// 2. HEAD request\r\n\t\t\t// 3. no Content-Encoding header\r\n\t\t\t// 4. no content response (204)\r\n\t\t\t// 5. content not modified response (304)\r\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\r\n\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// For Node v6+\r\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\r\n\t\t\t// servers send slightly invalid responses that are still accepted\r\n\t\t\t// by common browsers.\r\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\r\n\t\t\tconst zlibOptions = {\r\n\t\t\t\tflush: zlib__WEBPACK_IMPORTED_MODULE_4__.Z_SYNC_FLUSH,\r\n\t\t\t\tfinishFlush: zlib__WEBPACK_IMPORTED_MODULE_4__.Z_SYNC_FLUSH\r\n\t\t\t};\r\n\r\n\t\t\t// for gzip\r\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\r\n\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createGunzip(zlibOptions));\r\n\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// for deflate\r\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\r\n\t\t\t\t// handle the infamous raw deflate response from old servers\r\n\t\t\t\t// a hack for old IIS and Apache servers\r\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\r\n\t\t\t\traw.once('data', function (chunk) {\r\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\r\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\r\n\t\t\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createInflate());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createInflateRaw());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\t\tresolve(response);\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// for br\r\n\t\t\tif (codings == 'br' && typeof zlib__WEBPACK_IMPORTED_MODULE_4__.createBrotliDecompress === 'function') {\r\n\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createBrotliDecompress());\r\n\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise, use response as-is\r\n\t\t\tresponse = new Response(body, response_options);\r\n\t\t\tresolve(response);\r\n\t\t});\r\n\r\n\t\twriteToStream(req, request);\r\n\t});\r\n}\r\n/**\r\n * Redirect code matching\r\n *\r\n * @param   Number   code  Status code\r\n * @return  Boolean\r\n */\r\nfetch.isRedirect = function (code) {\r\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\r\n};\r\n\r\n// expose Promise\r\nfetch.Promise = global.Promise;\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (fetch);\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/node-fetch/lib/index.mjs\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var minimist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! minimist */ \"./node_modules/minimist/index.js\");\n/* harmony import */ var minimist__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(minimist__WEBPACK_IMPORTED_MODULE_0__);\n\r\nvar argv = minimist__WEBPACK_IMPORTED_MODULE_0___default()(process.argv);\r\nconsole.log(\"Arguments:\");\r\nconsole.log(argv);\r\n__webpack_require__(/*! ./test/main.test */ \"./src/test/main.test.ts\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHM/NzFiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWluaW1pc3RGdW5jIGZyb20gXCJtaW5pbWlzdFwiO1xyXG52YXIgYXJndiA9IG1pbmltaXN0RnVuYyhwcm9jZXNzLmFyZ3YpO1xyXG5jb25zb2xlLmxvZyhcIkFyZ3VtZW50czpcIik7XHJcbmNvbnNvbGUubG9nKGFyZ3YpO1xyXG5yZXF1aXJlKCcuL3Rlc3QvbWFpbi50ZXN0Jyk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/lib/replacer.ts":
/*!*****************************!*\
  !*** ./src/lib/replacer.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar split = \"￥\";\r\nexports.setSplit = setSplit;\r\nexports.replaceContent = replaceContent;\r\nexports.replaceWithSplit = replaceWithSplit;\r\nexports.mergeDict = mergeDict;\r\nexports.turnDict = turnDict;\r\nfunction setSplit(splitVal) {\r\n    split = splitVal;\r\n}\r\nfunction mergeDict(...args) {\r\n    var mergeValue = {};\r\n    for (var i in args) {\r\n        var arg = args[i];\r\n        for (var j in arg) {\r\n            mergeValue[j] = arg[j];\r\n        }\r\n    }\r\n    return mergeValue;\r\n}\r\nfunction turnDict(dict) {\r\n    var returnDict = {};\r\n    for (var i in dict) {\r\n        if (returnDict[dict[i]]) {\r\n            throw {\r\n                name: \"TypeError\",\r\n                message: `字典的键值对没有唯一对应关系:${returnDict[dict[i]]}:${dict[i]}与${i}:${dict[i]}冲突.`\r\n            };\r\n        }\r\n        else {\r\n            returnDict[dict[i]] = i;\r\n        }\r\n    }\r\n    return returnDict;\r\n}\r\nfunction replaceContent(content, dict) {\r\n    var patt = /[\\u4E00-\\u9FA5A-Za-z0-9_$-]+/g;\r\n    var match = content.match(patt);\r\n    var fail = [];\r\n    var success = [];\r\n    for (var i in match) {\r\n        let index = parseInt(i);\r\n        if (dict[match[index]]) {\r\n            content = content.replace(match[index], dict[match[index]]);\r\n            success.push(match[index]);\r\n        }\r\n        else {\r\n            fail.push(match[index]);\r\n        }\r\n    }\r\n    return {\r\n        content: content,\r\n        success: success,\r\n        fail: fail\r\n    };\r\n}\r\nfunction replaceWithSplit(content, dict) {\r\n    var strArray = content.split(split);\r\n    var str = \"\";\r\n    var objectArray = [];\r\n    var returnValue;\r\n    for (let i in strArray) {\r\n        if (parseInt(i) % 2 == 0) {\r\n            returnValue = replaceContent(strArray[i], dict);\r\n            str = str + returnValue.content;\r\n            objectArray.push(returnValue);\r\n        }\r\n        else {\r\n            str = str + strArray[i];\r\n            objectArray.push(strArray[i]);\r\n        }\r\n    }\r\n    return {\r\n        content: str,\r\n        returnArray: objectArray\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliL3JlcGxhY2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9yZXBsYWNlci50cz9lN2Y0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgc3BsaXQgPSBcIu+/pVwiO1xyXG5leHBvcnRzLnNldFNwbGl0ID0gc2V0U3BsaXQ7XHJcbmV4cG9ydHMucmVwbGFjZUNvbnRlbnQgPSByZXBsYWNlQ29udGVudDtcclxuZXhwb3J0cy5yZXBsYWNlV2l0aFNwbGl0ID0gcmVwbGFjZVdpdGhTcGxpdDtcclxuZXhwb3J0cy5tZXJnZURpY3QgPSBtZXJnZURpY3Q7XHJcbmV4cG9ydHMudHVybkRpY3QgPSB0dXJuRGljdDtcclxuZnVuY3Rpb24gc2V0U3BsaXQoc3BsaXRWYWwpIHtcclxuICAgIHNwbGl0ID0gc3BsaXRWYWw7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VEaWN0KC4uLmFyZ3MpIHtcclxuICAgIHZhciBtZXJnZVZhbHVlID0ge307XHJcbiAgICBmb3IgKHZhciBpIGluIGFyZ3MpIHtcclxuICAgICAgICB2YXIgYXJnID0gYXJnc1tpXTtcclxuICAgICAgICBmb3IgKHZhciBqIGluIGFyZykge1xyXG4gICAgICAgICAgICBtZXJnZVZhbHVlW2pdID0gYXJnW2pdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtZXJnZVZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIHR1cm5EaWN0KGRpY3QpIHtcclxuICAgIHZhciByZXR1cm5EaWN0ID0ge307XHJcbiAgICBmb3IgKHZhciBpIGluIGRpY3QpIHtcclxuICAgICAgICBpZiAocmV0dXJuRGljdFtkaWN0W2ldXSkge1xyXG4gICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlR5cGVFcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYOWtl+WFuOeahOmUruWAvOWvueayoeacieWUr+S4gOWvueW6lOWFs+ezuzoke3JldHVybkRpY3RbZGljdFtpXV19OiR7ZGljdFtpXX3kuI4ke2l9OiR7ZGljdFtpXX3lhrLnqoEuYFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuRGljdFtkaWN0W2ldXSA9IGk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldHVybkRpY3Q7XHJcbn1cclxuZnVuY3Rpb24gcmVwbGFjZUNvbnRlbnQoY29udGVudCwgZGljdCkge1xyXG4gICAgdmFyIHBhdHQgPSAvW1xcdTRFMDAtXFx1OUZBNUEtWmEtejAtOV8kLV0rL2c7XHJcbiAgICB2YXIgbWF0Y2ggPSBjb250ZW50Lm1hdGNoKHBhdHQpO1xyXG4gICAgdmFyIGZhaWwgPSBbXTtcclxuICAgIHZhciBzdWNjZXNzID0gW107XHJcbiAgICBmb3IgKHZhciBpIGluIG1hdGNoKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gcGFyc2VJbnQoaSk7XHJcbiAgICAgICAgaWYgKGRpY3RbbWF0Y2hbaW5kZXhdXSkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG1hdGNoW2luZGV4XSwgZGljdFttYXRjaFtpbmRleF1dKTtcclxuICAgICAgICAgICAgc3VjY2Vzcy5wdXNoKG1hdGNoW2luZGV4XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmYWlsLnB1c2gobWF0Y2hbaW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgc3VjY2Vzczogc3VjY2VzcyxcclxuICAgICAgICBmYWlsOiBmYWlsXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHJlcGxhY2VXaXRoU3BsaXQoY29udGVudCwgZGljdCkge1xyXG4gICAgdmFyIHN0ckFycmF5ID0gY29udGVudC5zcGxpdChzcGxpdCk7XHJcbiAgICB2YXIgc3RyID0gXCJcIjtcclxuICAgIHZhciBvYmplY3RBcnJheSA9IFtdO1xyXG4gICAgdmFyIHJldHVyblZhbHVlO1xyXG4gICAgZm9yIChsZXQgaSBpbiBzdHJBcnJheSkge1xyXG4gICAgICAgIGlmIChwYXJzZUludChpKSAlIDIgPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHJlcGxhY2VDb250ZW50KHN0ckFycmF5W2ldLCBkaWN0KTtcclxuICAgICAgICAgICAgc3RyID0gc3RyICsgcmV0dXJuVmFsdWUuY29udGVudDtcclxuICAgICAgICAgICAgb2JqZWN0QXJyYXkucHVzaChyZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIgKyBzdHJBcnJheVtpXTtcclxuICAgICAgICAgICAgb2JqZWN0QXJyYXkucHVzaChzdHJBcnJheVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb250ZW50OiBzdHIsXHJcbiAgICAgICAgcmV0dXJuQXJyYXk6IG9iamVjdEFycmF5XHJcbiAgICB9O1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/replacer.ts\n");

/***/ }),

/***/ "./src/lib/utils.ts":
/*!**************************!*\
  !*** ./src/lib/utils.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar nodefetch = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/lib/index.mjs\");\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nexports.readWithWeb = readWithWeb;\r\nexports.readWithWebAndRedirect = readWithWebAndRedirect;\r\nexports.downloadWithWeb = downloadWithWeb;\r\nexports.downloadWithWebAndRedirect = downloadWithWebAndRedirect;\r\nexports.readWithFile = readWithFile;\r\nfunction downloadWithWeb(path, url) {\r\n    if (!url) {\r\n        url = \"https://api.github.com/repos/Orangex4/Orangex/releases/latest\";\r\n    }\r\n    if (!path) {\r\n        path = \"./map/dict.json\";\r\n    }\r\n    nodefetch(url, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/octet-stream' },\r\n    }).then((res) => res.buffer()).then((_buffer) => {\r\n        fs.writeFile(path, _buffer, \"binary\", function (err) {\r\n            console.log(err || path);\r\n        });\r\n    });\r\n}\r\nfunction downloadWithWebAndRedirect(path, url) {\r\n    if (!url) {\r\n        url = \"https://api.github.com/repos/Orangex4/Orangex/releases/latest\";\r\n    }\r\n    readWithWeb((html) => {\r\n        var jsonObject = JSON.parse(html);\r\n        var fileUrl = jsonObject.assets[0].browser_download_url;\r\n        downloadWithWeb(path, fileUrl);\r\n    }, url);\r\n}\r\nfunction readWithWeb(callback, url) {\r\n    if (!url) {\r\n        url = \"https://api.github.com/repos/Orangex4/Orangex/releases/latest\";\r\n    }\r\n    nodefetch(url, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/octet-stream' },\r\n    }).then((res) => res.buffer()).then((_buffer) => {\r\n        callback(_buffer.toString(\"utf8\"));\r\n    });\r\n}\r\nfunction readWithWebAndRedirect(callback, url) {\r\n    if (!url) {\r\n        url = \"https://api.github.com/repos/Orangex4/Orangex/releases/latest\";\r\n    }\r\n    readWithWeb((html) => {\r\n        var jsonObject = JSON.parse(html);\r\n        var fileUrl = jsonObject.assets[0].browser_download_url;\r\n        readWithWeb(callback, fileUrl);\r\n    }, url);\r\n}\r\nfunction readWithFile(callback, path) {\r\n    var data = \"\";\r\n    if (!path) {\r\n        path = \"D:\\\\project\\\\Orangex\\\\map\\\\dict.json\";\r\n    }\r\n    var readerStream = fs.createReadStream(path);\r\n    readerStream.setEncoding('UTF8');\r\n    readerStream.on('data', function (chunk) {\r\n        data += chunk;\r\n    });\r\n    readerStream.on('end', function () {\r\n        callback(data);\r\n    });\r\n    readerStream.on('error', function (err) {\r\n        console.log(err.stack);\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliL3V0aWxzLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi91dGlscy50cz83OWRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgbm9kZWZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XHJcbnZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuZXhwb3J0cy5yZWFkV2l0aFdlYiA9IHJlYWRXaXRoV2ViO1xyXG5leHBvcnRzLnJlYWRXaXRoV2ViQW5kUmVkaXJlY3QgPSByZWFkV2l0aFdlYkFuZFJlZGlyZWN0O1xyXG5leHBvcnRzLmRvd25sb2FkV2l0aFdlYiA9IGRvd25sb2FkV2l0aFdlYjtcclxuZXhwb3J0cy5kb3dubG9hZFdpdGhXZWJBbmRSZWRpcmVjdCA9IGRvd25sb2FkV2l0aFdlYkFuZFJlZGlyZWN0O1xyXG5leHBvcnRzLnJlYWRXaXRoRmlsZSA9IHJlYWRXaXRoRmlsZTtcclxuZnVuY3Rpb24gZG93bmxvYWRXaXRoV2ViKHBhdGgsIHVybCkge1xyXG4gICAgaWYgKCF1cmwpIHtcclxuICAgICAgICB1cmwgPSBcImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvT3JhbmdleDQvT3JhbmdleC9yZWxlYXNlcy9sYXRlc3RcIjtcclxuICAgIH1cclxuICAgIGlmICghcGF0aCkge1xyXG4gICAgICAgIHBhdGggPSBcIi4vbWFwL2RpY3QuanNvblwiO1xyXG4gICAgfVxyXG4gICAgbm9kZWZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gcmVzLmJ1ZmZlcigpKS50aGVuKChfYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgZnMud3JpdGVGaWxlKHBhdGgsIF9idWZmZXIsIFwiYmluYXJ5XCIsIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyIHx8IHBhdGgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZG93bmxvYWRXaXRoV2ViQW5kUmVkaXJlY3QocGF0aCwgdXJsKSB7XHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICAgIHVybCA9IFwiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9PcmFuZ2V4NC9PcmFuZ2V4L3JlbGVhc2VzL2xhdGVzdFwiO1xyXG4gICAgfVxyXG4gICAgcmVhZFdpdGhXZWIoKGh0bWwpID0+IHtcclxuICAgICAgICB2YXIganNvbk9iamVjdCA9IEpTT04ucGFyc2UoaHRtbCk7XHJcbiAgICAgICAgdmFyIGZpbGVVcmwgPSBqc29uT2JqZWN0LmFzc2V0c1swXS5icm93c2VyX2Rvd25sb2FkX3VybDtcclxuICAgICAgICBkb3dubG9hZFdpdGhXZWIocGF0aCwgZmlsZVVybCk7XHJcbiAgICB9LCB1cmwpO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWRXaXRoV2ViKGNhbGxiYWNrLCB1cmwpIHtcclxuICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgdXJsID0gXCJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL09yYW5nZXg0L09yYW5nZXgvcmVsZWFzZXMvbGF0ZXN0XCI7XHJcbiAgICB9XHJcbiAgICBub2RlZmV0Y2godXJsLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB9LFxyXG4gICAgfSkudGhlbigocmVzKSA9PiByZXMuYnVmZmVyKCkpLnRoZW4oKF9idWZmZXIpID0+IHtcclxuICAgICAgICBjYWxsYmFjayhfYnVmZmVyLnRvU3RyaW5nKFwidXRmOFwiKSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiByZWFkV2l0aFdlYkFuZFJlZGlyZWN0KGNhbGxiYWNrLCB1cmwpIHtcclxuICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgdXJsID0gXCJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL09yYW5nZXg0L09yYW5nZXgvcmVsZWFzZXMvbGF0ZXN0XCI7XHJcbiAgICB9XHJcbiAgICByZWFkV2l0aFdlYigoaHRtbCkgPT4ge1xyXG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0gSlNPTi5wYXJzZShodG1sKTtcclxuICAgICAgICB2YXIgZmlsZVVybCA9IGpzb25PYmplY3QuYXNzZXRzWzBdLmJyb3dzZXJfZG93bmxvYWRfdXJsO1xyXG4gICAgICAgIHJlYWRXaXRoV2ViKGNhbGxiYWNrLCBmaWxlVXJsKTtcclxuICAgIH0sIHVybCk7XHJcbn1cclxuZnVuY3Rpb24gcmVhZFdpdGhGaWxlKGNhbGxiYWNrLCBwYXRoKSB7XHJcbiAgICB2YXIgZGF0YSA9IFwiXCI7XHJcbiAgICBpZiAoIXBhdGgpIHtcclxuICAgICAgICBwYXRoID0gXCJEOlxcXFxwcm9qZWN0XFxcXE9yYW5nZXhcXFxcbWFwXFxcXGRpY3QuanNvblwiO1xyXG4gICAgfVxyXG4gICAgdmFyIHJlYWRlclN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCk7XHJcbiAgICByZWFkZXJTdHJlYW0uc2V0RW5jb2RpbmcoJ1VURjgnKTtcclxuICAgIHJlYWRlclN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xyXG4gICAgICAgIGRhdGEgKz0gY2h1bms7XHJcbiAgICB9KTtcclxuICAgIHJlYWRlclN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgfSk7XHJcbiAgICByZWFkZXJTdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XHJcbiAgICB9KTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/utils.ts\n");

/***/ }),

/***/ "./src/test/main.test.ts":
/*!*******************************!*\
  !*** ./src/test/main.test.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar replacer = __webpack_require__(/*! ../lib/replacer */ \"./src/lib/replacer.ts\");\r\nvar utils = __webpack_require__(/*! ../lib/utils */ \"./src/lib/utils.ts\");\r\nvar str = \"jsx js  default if  ddd ￥中文注释￥ 1数字-Head $\";\r\n{\r\n}\r\nutils.readWithFile(testFunc);\r\nvar testDict = { a: \"1\", b: \"2\", c: \"3\", d: \"5\", e: \"6\" };\r\nconsole.log(\"Merge:\");\r\nconsole.log(replacer.mergeDict({ a: \"1\", b: \"2\", c: \"3\" }, { c: \"4\", d: \"5\", e: \"6\" }));\r\nconsole.log(\"Turn:\");\r\nconsole.log(replacer.turnDict(testDict));\r\nfunction testFunc(dict) {\r\n    replacer.setSplit(\"￥\");\r\n    var dictionary = JSON.parse(dict);\r\n    var mergeDict = replacer.mergeDict(dictionary.common, dictionary.computer);\r\n    var returnObject = replacer.replaceWithSplit(str, mergeDict);\r\n    console.log(\"All:\");\r\n    console.log(returnObject);\r\n    console.log(\"Content:\");\r\n    console.log(returnObject.content);\r\n    console.log(\"Translater:\");\r\n    console.log(replacer.replaceWithSplit(returnObject.content, replacer.turnDict(mergeDict)).content);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdGVzdC9tYWluLnRlc3QudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGVzdC9tYWluLnRlc3QudHM/OTU1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIHJlcGxhY2VyID0gcmVxdWlyZSgnLi4vbGliL3JlcGxhY2VyJyk7XHJcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2xpYi91dGlscycpO1xyXG52YXIgc3RyID0gXCJqc3gganMgIGRlZmF1bHQgaWYgIGRkZCDvv6XkuK3mlofms6jph4rvv6UgMeaVsOWtly1IZWFkICRcIjtcclxue1xyXG59XHJcbnV0aWxzLnJlYWRXaXRoRmlsZSh0ZXN0RnVuYyk7XHJcbnZhciB0ZXN0RGljdCA9IHsgYTogXCIxXCIsIGI6IFwiMlwiLCBjOiBcIjNcIiwgZDogXCI1XCIsIGU6IFwiNlwiIH07XHJcbmNvbnNvbGUubG9nKFwiTWVyZ2U6XCIpO1xyXG5jb25zb2xlLmxvZyhyZXBsYWNlci5tZXJnZURpY3QoeyBhOiBcIjFcIiwgYjogXCIyXCIsIGM6IFwiM1wiIH0sIHsgYzogXCI0XCIsIGQ6IFwiNVwiLCBlOiBcIjZcIiB9KSk7XHJcbmNvbnNvbGUubG9nKFwiVHVybjpcIik7XHJcbmNvbnNvbGUubG9nKHJlcGxhY2VyLnR1cm5EaWN0KHRlc3REaWN0KSk7XHJcbmZ1bmN0aW9uIHRlc3RGdW5jKGRpY3QpIHtcclxuICAgIHJlcGxhY2VyLnNldFNwbGl0KFwi77+lXCIpO1xyXG4gICAgdmFyIGRpY3Rpb25hcnkgPSBKU09OLnBhcnNlKGRpY3QpO1xyXG4gICAgdmFyIG1lcmdlRGljdCA9IHJlcGxhY2VyLm1lcmdlRGljdChkaWN0aW9uYXJ5LmNvbW1vbiwgZGljdGlvbmFyeS5jb21wdXRlcik7XHJcbiAgICB2YXIgcmV0dXJuT2JqZWN0ID0gcmVwbGFjZXIucmVwbGFjZVdpdGhTcGxpdChzdHIsIG1lcmdlRGljdCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIkFsbDpcIik7XHJcbiAgICBjb25zb2xlLmxvZyhyZXR1cm5PYmplY3QpO1xyXG4gICAgY29uc29sZS5sb2coXCJDb250ZW50OlwiKTtcclxuICAgIGNvbnNvbGUubG9nKHJldHVybk9iamVjdC5jb250ZW50KTtcclxuICAgIGNvbnNvbGUubG9nKFwiVHJhbnNsYXRlcjpcIik7XHJcbiAgICBjb25zb2xlLmxvZyhyZXBsYWNlci5yZXBsYWNlV2l0aFNwbGl0KHJldHVybk9iamVjdC5jb250ZW50LCByZXBsYWNlci50dXJuRGljdChtZXJnZURpY3QpKS5jb250ZW50KTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/test/main.test.ts\n");

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./src/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/index.ts */"./src/index.ts");


/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ })

/******/ });